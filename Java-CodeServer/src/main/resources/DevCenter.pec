define Module as storable category with attributes name, version, description and image

define Library as storable Module
define Service as storable Module
define Script as storable Module

define entryPoint as storable Text attribute
define Application as storable Module with attribute entryPoint

define module as storable Module attribute

define lastOpened as storable DateTime attribute
define CodingSession as storable category with attributes user, module and lastOpened
define RecentSession as storable CodingSession

define Declaration as storable category with attributes name, version, dialect, body and module
define AttributeDeclaration as storable Declaration
define CategoryDeclaration as storable Declaration
define MethodDeclaration as storable Declaration with attribute prototype
define TestDeclaration as storable Declaration

define declaration as Declaration attribute

define EditStatus as enumerated Text with symbols:
	CLEAN with "CLEAN" as value
	CREATED with "CREATED" as value
	DELETED with "DELETED" as value 
	DIRTY with "DIRTY" as value

define editStatus as EditStatus attribute with key index

define EditedDeclaration as category with attributes editStatus and declaration

define getRecentModules as method receiving Integer count doing:
	user = getHttpUser
	sessions = fetch RecentSession 1 to count where user = user order by lastOpened desc
	return session.module for each session in sessions

define getAllModules as method doing:
	return fetch all Module order by name

define getModuleDeclarations as method receiving dbId doing:
	user = getHttpUser
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	// use this opportunity to keep track of coding sessions
	session = CodingSession with user as user, module as module and now as lastOpened 
	store session
	// use this opportunity to keep track of recent projects
	recent = fetch one mutable RecentSession where user = user and module = module
	if recent is nothing:
		recent = RecentSession with user as user, module as module and now as lastOpened 
	else:
		recent.lastOpened = now 
	store recent
	
	return fetch all Declaration where module = module

define storeDeclarations as method receiving EditedDeclaration[] edited doing:
	deleted = d1.declaration for each d1 in fetch any d from edited where d.editStatus = DELETED
	created = d2.declaration for each d2 in fetch any d from edited where d.editStatus = CREATED
	updated = d3.declaration for each d3 in fetch any d from edited where d.editStatus = DIRTY
	delete deleted and store created, updated 



